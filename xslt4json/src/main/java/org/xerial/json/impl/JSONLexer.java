// $ANTLR 3.3 Nov 30, 2010 12:45:30 /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g 2012-10-18 02:51:50

// AUTOGENERATED BY ANTLR!!! DO NOT MODIFY!!!

//--------------------------------------
// XerialJ Project
//
// JSONLexer.java
// Since: Apr 26, 2007
//
//--------------------------------------
package org.xerial.json.impl;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

public class JSONLexer extends Lexer {
    public static final int EOF=-1;
    public static final int T__21=21;
    public static final int T__22=22;
    public static final int T__23=23;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__26=26;
    public static final int XML_ELEMENT=4;
    public static final int XML_ATTRIBUTE=5;
    public static final int Dot=6;
    public static final int NULL=7;
    public static final int Digit=8;
    public static final int HexDigit=9;
    public static final int UnicodeChar=10;
    public static final int EscapeSequence=11;
    public static final int StringChar=12;
    public static final int Int=13;
    public static final int Frac=14;
    public static final int Exp=15;
    public static final int WhiteSpace=16;
    public static final int String=17;
    public static final int Integer=18;
    public static final int Double=19;
    public static final int Boolean=20;

    // delegates
    // delegators

    public JSONLexer() {;} 
    public JSONLexer(CharStream input) {
        this(input, new RecognizerSharedState());
    }
    public JSONLexer(CharStream input, RecognizerSharedState state) {
        super(input,state);

    }
    public String getGrammarFileName() { return "/home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g"; }

    // $ANTLR start "T__21"
    public final void mT__21() throws RecognitionException {
        try {
            int _type = T__21;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:20:7: ( '{' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:20:9: '{'
            {
            match('{'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__21"

    // $ANTLR start "T__22"
    public final void mT__22() throws RecognitionException {
        try {
            int _type = T__22;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:21:7: ( ',' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:21:9: ','
            {
            match(','); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__22"

    // $ANTLR start "T__23"
    public final void mT__23() throws RecognitionException {
        try {
            int _type = T__23;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:22:7: ( '}' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:22:9: '}'
            {
            match('}'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__23"

    // $ANTLR start "T__24"
    public final void mT__24() throws RecognitionException {
        try {
            int _type = T__24;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:23:7: ( ':' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:23:9: ':'
            {
            match(':'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__24"

    // $ANTLR start "T__25"
    public final void mT__25() throws RecognitionException {
        try {
            int _type = T__25;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:24:7: ( '[' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:24:9: '['
            {
            match('['); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__25"

    // $ANTLR start "T__26"
    public final void mT__26() throws RecognitionException {
        try {
            int _type = T__26;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:25:7: ( ']' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:25:9: ']'
            {
            match(']'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "T__26"

    // $ANTLR start "Dot"
    public final void mDot() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:68:13: ( '.' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:68:15: '.'
            {
            match('.'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Dot"

    // $ANTLR start "NULL"
    public final void mNULL() throws RecognitionException {
        try {
            int _type = NULL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:69:5: ( 'null' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:69:7: 'null'
            {
            match("null"); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "NULL"

    // $ANTLR start "Digit"
    public final void mDigit() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:71:15: ( '0' .. '9' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:71:17: '0' .. '9'
            {
            matchRange('0','9'); 

            }

        }
        finally {
        }
    }
    // $ANTLR end "Digit"

    // $ANTLR start "HexDigit"
    public final void mHexDigit() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:72:18: ( ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:72:20: ( '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' )
            {
            if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "HexDigit"

    // $ANTLR start "UnicodeChar"
    public final void mUnicodeChar() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:73:21: (~ ( '\"' | '\\\\' ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:73:23: ~ ( '\"' | '\\\\' )
            {
            if ( (input.LA(1)>='\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uFFFF') ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}


            }

        }
        finally {
        }
    }
    // $ANTLR end "UnicodeChar"

    // $ANTLR start "StringChar"
    public final void mStringChar() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:74:21: ( UnicodeChar | EscapeSequence )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( ((LA1_0>='\u0000' && LA1_0<='!')||(LA1_0>='#' && LA1_0<='[')||(LA1_0>=']' && LA1_0<='\uFFFF')) ) {
                alt1=1;
            }
            else if ( (LA1_0=='\\') ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:74:24: UnicodeChar
                    {
                    mUnicodeChar(); 

                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:74:38: EscapeSequence
                    {
                    mEscapeSequence(); 

                    }
                    break;

            }
        }
        finally {
        }
    }
    // $ANTLR end "StringChar"

    // $ANTLR start "EscapeSequence"
    public final void mEscapeSequence() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:77:2: ( '\\\\' ( '\\\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' HexDigit HexDigit HexDigit HexDigit ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:77:4: '\\\\' ( '\\\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' HexDigit HexDigit HexDigit HexDigit )
            {
            match('\\'); 
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:78:4: ( '\\\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' HexDigit HexDigit HexDigit HexDigit )
            int alt2=9;
            switch ( input.LA(1) ) {
            case '\"':
                {
                alt2=1;
                }
                break;
            case '\\':
                {
                alt2=2;
                }
                break;
            case '/':
                {
                alt2=3;
                }
                break;
            case 'b':
                {
                alt2=4;
                }
                break;
            case 'f':
                {
                alt2=5;
                }
                break;
            case 'n':
                {
                alt2=6;
                }
                break;
            case 'r':
                {
                alt2=7;
                }
                break;
            case 't':
                {
                alt2=8;
                }
                break;
            case 'u':
                {
                alt2=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }

            switch (alt2) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:78:5: '\\\"'
                    {
                    match('\"'); 

                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:79:5: '\\\\'
                    {
                    match('\\'); 
                    setText("\\");

                    }
                    break;
                case 3 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:80:6: '/'
                    {
                    match('/'); 
                    setText("/");

                    }
                    break;
                case 4 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:81:6: 'b'
                    {
                    match('b'); 
                    setText("\b");

                    }
                    break;
                case 5 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:82:6: 'f'
                    {
                    match('f'); 
                    setText("\f");

                    }
                    break;
                case 6 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:83:6: 'n'
                    {
                    match('n'); 
                    setText("\n");

                    }
                    break;
                case 7 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:84:6: 'r'
                    {
                    match('r'); 
                    setText("\r");

                    }
                    break;
                case 8 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:85:6: 't'
                    {
                    match('t'); 
                    setText("\t");

                    }
                    break;
                case 9 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:86:6: 'u' HexDigit HexDigit HexDigit HexDigit
                    {
                    match('u'); 
                    mHexDigit(); 
                    mHexDigit(); 
                    mHexDigit(); 
                    mHexDigit(); 

                    }
                    break;

            }


            }

        }
        finally {
        }
    }
    // $ANTLR end "EscapeSequence"

    // $ANTLR start "Int"
    public final void mInt() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:13: ( ( '-' )? ( '0' | '1' .. '9' ( Digit )* ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:15: ( '-' )? ( '0' | '1' .. '9' ( Digit )* )
            {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:15: ( '-' )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0=='-') ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:15: '-'
                    {
                    match('-'); 

                    }
                    break;

            }

            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:20: ( '0' | '1' .. '9' ( Digit )* )
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0=='0') ) {
                alt5=1;
            }
            else if ( ((LA5_0>='1' && LA5_0<='9')) ) {
                alt5=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }
            switch (alt5) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:21: '0'
                    {
                    match('0'); 

                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:27: '1' .. '9' ( Digit )*
                    {
                    matchRange('1','9'); 
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:36: ( Digit )*
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( ((LA4_0>='0' && LA4_0<='9')) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:90:36: Digit
                    	    {
                    	    mDigit(); 

                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);


                    }
                    break;

            }


            }

        }
        finally {
        }
    }
    // $ANTLR end "Int"

    // $ANTLR start "Frac"
    public final void mFrac() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:91:14: ( Dot ( Digit )+ )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:91:16: Dot ( Digit )+
            {
            mDot(); 
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:91:20: ( Digit )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( ((LA6_0>='0' && LA6_0<='9')) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:91:20: Digit
            	    {
            	    mDigit(); 

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Frac"

    // $ANTLR start "Exp"
    public final void mExp() throws RecognitionException {
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:92:13: ( ( 'e' | 'E' ) ( '+' | '-' )? ( Digit )+ )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:92:15: ( 'e' | 'E' ) ( '+' | '-' )? ( Digit )+
            {
            if ( input.LA(1)=='E'||input.LA(1)=='e' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:92:27: ( '+' | '-' )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0=='+'||LA7_0=='-') ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:
                    {
                    if ( input.LA(1)=='+'||input.LA(1)=='-' ) {
                        input.consume();

                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        recover(mse);
                        throw mse;}


                    }
                    break;

            }

            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:92:40: ( Digit )+
            int cnt8=0;
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( ((LA8_0>='0' && LA8_0<='9')) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:92:40: Digit
            	    {
            	    mDigit(); 

            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);


            }

        }
        finally {
        }
    }
    // $ANTLR end "Exp"

    // $ANTLR start "WhiteSpace"
    public final void mWhiteSpace() throws RecognitionException {
        try {
            int _type = WhiteSpace;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:94:11: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:94:13: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
            {
            if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ' ) {
                input.consume();

            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;}

             _channel=HIDDEN; 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "WhiteSpace"

    // $ANTLR start "String"
    public final void mString() throws RecognitionException {
        try {
            int _type = String;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            CommonToken c=null;

            StringBuilder sb = new StringBuilder();
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:96:55: ( '\"' (c= StringChar )* '\"' )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:96:57: '\"' (c= StringChar )* '\"'
            {
            match('\"'); 
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:96:61: (c= StringChar )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( ((LA9_0>='\u0000' && LA9_0<='!')||(LA9_0>='#' && LA9_0<='\uFFFF')) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:96:62: c= StringChar
            	    {
            	    int cStart377 = getCharIndex();
            	    int cStartLine377 = getLine();
            	    int cStartCharPos377 = getCharPositionInLine();
            	    mStringChar(); 
            	    c = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, cStart377, getCharIndex()-1);
            	    c.setLine(cStartLine377);
            	    c.setCharPositionInLine(cStartCharPos377);
            	    sb.append(c.getText());

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            match('\"'); 
            setText(sb.toString());

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "String"

    // $ANTLR start "Integer"
    public final void mInteger() throws RecognitionException {
        try {
            int _type = Integer;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:97:8: ( Int )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:97:10: Int
            {
            mInt(); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Integer"

    // $ANTLR start "Double"
    public final void mDouble() throws RecognitionException {
        try {
            int _type = Double;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:7: ( Int ( Frac ( Exp )? | Exp ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:10: Int ( Frac ( Exp )? | Exp )
            {
            mInt(); 
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:14: ( Frac ( Exp )? | Exp )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0=='.') ) {
                alt11=1;
            }
            else if ( (LA11_0=='E'||LA11_0=='e') ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:15: Frac ( Exp )?
                    {
                    mFrac(); 
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:20: ( Exp )?
                    int alt10=2;
                    int LA10_0 = input.LA(1);

                    if ( (LA10_0=='E'||LA10_0=='e') ) {
                        alt10=1;
                    }
                    switch (alt10) {
                        case 1 :
                            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:20: Exp
                            {
                            mExp(); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:98:27: Exp
                    {
                    mExp(); 

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Double"

    // $ANTLR start "Boolean"
    public final void mBoolean() throws RecognitionException {
        try {
            int _type = Boolean;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:99:8: ( 'false' | 'true' )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0=='f') ) {
                alt12=1;
            }
            else if ( (LA12_0=='t') ) {
                alt12=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:99:10: 'false'
                    {
                    match("false"); 


                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:99:20: 'true'
                    {
                    match("true"); 


                    }
                    break;

            }
            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "Boolean"

    public void mTokens() throws RecognitionException {
        // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | NULL | WhiteSpace | String | Integer | Double | Boolean )
        int alt13=12;
        alt13 = dfa13.predict(input);
        switch (alt13) {
            case 1 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:10: T__21
                {
                mT__21(); 

                }
                break;
            case 2 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:16: T__22
                {
                mT__22(); 

                }
                break;
            case 3 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:22: T__23
                {
                mT__23(); 

                }
                break;
            case 4 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:28: T__24
                {
                mT__24(); 

                }
                break;
            case 5 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:34: T__25
                {
                mT__25(); 

                }
                break;
            case 6 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:40: T__26
                {
                mT__26(); 

                }
                break;
            case 7 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:46: NULL
                {
                mNULL(); 

                }
                break;
            case 8 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:51: WhiteSpace
                {
                mWhiteSpace(); 

                }
                break;
            case 9 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:62: String
                {
                mString(); 

                }
                break;
            case 10 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:69: Integer
                {
                mInteger(); 

                }
                break;
            case 11 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:77: Double
                {
                mDouble(); 

                }
                break;
            case 12 :
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:1:84: Boolean
                {
                mBoolean(); 

                }
                break;

        }

    }


    protected DFA13 dfa13 = new DFA13(this);
    static final String DFA13_eotS =
        "\13\uffff\2\16\3\uffff\1\16";
    static final String DFA13_eofS =
        "\21\uffff";
    static final String DFA13_minS =
        "\1\11\11\uffff\1\60\2\56\3\uffff\1\56";
    static final String DFA13_maxS =
        "\1\175\11\uffff\1\71\2\145\3\uffff\1\145";
    static final String DFA13_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\3\uffff\1\14\1\12"+
        "\1\13\1\uffff";
    static final String DFA13_specialS =
        "\21\uffff}>";
    static final String[] DFA13_transitionS = {
            "\2\10\1\uffff\2\10\22\uffff\1\10\1\uffff\1\11\11\uffff\1\2\1"+
            "\12\2\uffff\1\13\11\14\1\4\40\uffff\1\5\1\uffff\1\6\10\uffff"+
            "\1\15\7\uffff\1\7\5\uffff\1\15\6\uffff\1\1\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\11\14",
            "\1\17\26\uffff\1\17\37\uffff\1\17",
            "\1\17\1\uffff\12\20\13\uffff\1\17\37\uffff\1\17",
            "",
            "",
            "",
            "\1\17\1\uffff\12\20\13\uffff\1\17\37\uffff\1\17"
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "1:1: Tokens : ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | NULL | WhiteSpace | String | Integer | Double | Boolean );";
        }
    }
 

}