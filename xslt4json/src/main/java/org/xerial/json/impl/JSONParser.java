// $ANTLR 3.3 Nov 30, 2010 12:45:30 /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g 2012-10-18 02:51:50

// AUTOGENERATED BY ANTLR!!! DO NOT MODIFY!!!

//--------------------------------------
// Xerial Project
//
// JSONParser.java
// Since: Apr 26, 2007
//
//--------------------------------------
package org.xerial.json.impl;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.tree.*;

public class JSONParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "XML_ELEMENT", "XML_ATTRIBUTE", "Dot", "NULL", "Digit", "HexDigit", "UnicodeChar", "EscapeSequence", "StringChar", "Int", "Frac", "Exp", "WhiteSpace", "String", "Integer", "Double", "Boolean", "'{'", "','", "'}'", "':'", "'['", "']'"
    };
    public static final int EOF=-1;
    public static final int T__21=21;
    public static final int T__22=22;
    public static final int T__23=23;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__26=26;
    public static final int XML_ELEMENT=4;
    public static final int XML_ATTRIBUTE=5;
    public static final int Dot=6;
    public static final int NULL=7;
    public static final int Digit=8;
    public static final int HexDigit=9;
    public static final int UnicodeChar=10;
    public static final int EscapeSequence=11;
    public static final int StringChar=12;
    public static final int Int=13;
    public static final int Frac=14;
    public static final int Exp=15;
    public static final int WhiteSpace=16;
    public static final int String=17;
    public static final int Integer=18;
    public static final int Double=19;
    public static final int Boolean=20;

    // delegates
    // delegators


        public JSONParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JSONParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JSONParser.tokenNames; }
    public String getGrammarFileName() { return "/home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g"; }


    public static class json_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "json"
    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:102:1: json : value ;
    public final JSONParser.json_return json() throws RecognitionException {
        JSONParser.json_return retval = new JSONParser.json_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        JSONParser.value_return value1 = null;



        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:103:2: ( value )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:103:4: value
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_value_in_json409);
            value1=value();

            state._fsp--;

            adaptor.addChild(root_0, value1.getTree());

            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "json"

    public static class object_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object"
    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:106:1: object : '{' ( field ( ',' field )* )? '}' -> ^( XML_ELEMENT[\"object\"] ( field )* ) ;
    public final JSONParser.object_return object() throws RecognitionException {
        JSONParser.object_return retval = new JSONParser.object_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal2=null;
        Token char_literal4=null;
        Token char_literal6=null;
        JSONParser.field_return field3 = null;

        JSONParser.field_return field5 = null;


        Object char_literal2_tree=null;
        Object char_literal4_tree=null;
        Object char_literal6_tree=null;
        RewriteRuleTokenStream stream_21=new RewriteRuleTokenStream(adaptor,"token 21");
        RewriteRuleTokenStream stream_22=new RewriteRuleTokenStream(adaptor,"token 22");
        RewriteRuleTokenStream stream_23=new RewriteRuleTokenStream(adaptor,"token 23");
        RewriteRuleSubtreeStream stream_field=new RewriteRuleSubtreeStream(adaptor,"rule field");
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:2: ( '{' ( field ( ',' field )* )? '}' -> ^( XML_ELEMENT[\"object\"] ( field )* ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:4: '{' ( field ( ',' field )* )? '}'
            {
            char_literal2=(Token)match(input,21,FOLLOW_21_in_object420);  
            stream_21.add(char_literal2);

            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:8: ( field ( ',' field )* )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==String) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:9: field ( ',' field )*
                    {
                    pushFollow(FOLLOW_field_in_object423);
                    field3=field();

                    state._fsp--;

                    stream_field.add(field3.getTree());
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:15: ( ',' field )*
                    loop1:
                    do {
                        int alt1=2;
                        int LA1_0 = input.LA(1);

                        if ( (LA1_0==22) ) {
                            alt1=1;
                        }


                        switch (alt1) {
                    	case 1 :
                    	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:107:16: ',' field
                    	    {
                    	    char_literal4=(Token)match(input,22,FOLLOW_22_in_object426);  
                    	    stream_22.add(char_literal4);

                    	    pushFollow(FOLLOW_field_in_object428);
                    	    field5=field();

                    	    state._fsp--;

                    	    stream_field.add(field5.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop1;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal6=(Token)match(input,23,FOLLOW_23_in_object434);  
            stream_23.add(char_literal6);



            // AST REWRITE
            // elements: field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:4: -> ^( XML_ELEMENT[\"object\"] ( field )* )
            {
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:108:7: ^( XML_ELEMENT[\"object\"] ( field )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "object"), root_1);

                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:108:31: ( field )*
                while ( stream_field.hasNext() ) {
                    adaptor.addChild(root_1, stream_field.nextTree());

                }
                stream_field.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "object"

    public static class field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field"
    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:111:1: field : String ':' value -> ^( XML_ELEMENT[\"field\"] ^( XML_ATTRIBUTE[\"name\"] String ) value ) ;
    public final JSONParser.field_return field() throws RecognitionException {
        JSONParser.field_return retval = new JSONParser.field_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token String7=null;
        Token char_literal8=null;
        JSONParser.value_return value9 = null;


        Object String7_tree=null;
        Object char_literal8_tree=null;
        RewriteRuleTokenStream stream_String=new RewriteRuleTokenStream(adaptor,"token String");
        RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:112:2: ( String ':' value -> ^( XML_ELEMENT[\"field\"] ^( XML_ATTRIBUTE[\"name\"] String ) value ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:112:4: String ':' value
            {
            String7=(Token)match(input,String,FOLLOW_String_in_field459);  
            stream_String.add(String7);

            char_literal8=(Token)match(input,24,FOLLOW_24_in_field461);  
            stream_24.add(char_literal8);

            pushFollow(FOLLOW_value_in_field463);
            value9=value();

            state._fsp--;

            stream_value.add(value9.getTree());


            // AST REWRITE
            // elements: value, String
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 113:4: -> ^( XML_ELEMENT[\"field\"] ^( XML_ATTRIBUTE[\"name\"] String ) value )
            {
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:113:7: ^( XML_ELEMENT[\"field\"] ^( XML_ATTRIBUTE[\"name\"] String ) value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "field"), root_1);

                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:113:30: ^( XML_ATTRIBUTE[\"name\"] String )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ATTRIBUTE, "name"), root_2);

                adaptor.addChild(root_2, stream_String.nextNode());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "field"

    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array"
    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:116:1: array : '[' value ( ',' value )* ']' -> ^( XML_ELEMENT[\"array\"] ( value )+ ) ;
    public final JSONParser.array_return array() throws RecognitionException {
        JSONParser.array_return retval = new JSONParser.array_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token char_literal10=null;
        Token char_literal12=null;
        Token char_literal14=null;
        JSONParser.value_return value11 = null;

        JSONParser.value_return value13 = null;


        Object char_literal10_tree=null;
        Object char_literal12_tree=null;
        Object char_literal14_tree=null;
        RewriteRuleTokenStream stream_22=new RewriteRuleTokenStream(adaptor,"token 22");
        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
        RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,"token 26");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:117:2: ( '[' value ( ',' value )* ']' -> ^( XML_ELEMENT[\"array\"] ( value )+ ) )
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:117:4: '[' value ( ',' value )* ']'
            {
            char_literal10=(Token)match(input,25,FOLLOW_25_in_array495);  
            stream_25.add(char_literal10);

            pushFollow(FOLLOW_value_in_array497);
            value11=value();

            state._fsp--;

            stream_value.add(value11.getTree());
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:117:14: ( ',' value )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==22) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:117:15: ',' value
            	    {
            	    char_literal12=(Token)match(input,22,FOLLOW_22_in_array500);  
            	    stream_22.add(char_literal12);

            	    pushFollow(FOLLOW_value_in_array502);
            	    value13=value();

            	    state._fsp--;

            	    stream_value.add(value13.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            char_literal14=(Token)match(input,26,FOLLOW_26_in_array506);  
            stream_26.add(char_literal14);



            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:4: -> ^( XML_ELEMENT[\"array\"] ( value )+ )
            {
                // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:118:7: ^( XML_ELEMENT[\"array\"] ( value )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "array"), root_1);

                if ( !(stream_value.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_value.hasNext() ) {
                    adaptor.addChild(root_1, stream_value.nextTree());

                }
                stream_value.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;
            }

            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array"

    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "value"
    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:122:1: value : ( String -> ^( XML_ELEMENT[\"string\"] String ) | Integer -> ^( XML_ELEMENT[\"integer\"] Integer ) | Double -> ^( XML_ELEMENT[\"double\"] Double ) | Boolean -> ^( XML_ELEMENT[\"boolean\"] Boolean ) | object | array | NULL );
    public final JSONParser.value_return value() throws RecognitionException {
        JSONParser.value_return retval = new JSONParser.value_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token String15=null;
        Token Integer16=null;
        Token Double17=null;
        Token Boolean18=null;
        Token NULL21=null;
        JSONParser.object_return object19 = null;

        JSONParser.array_return array20 = null;


        Object String15_tree=null;
        Object Integer16_tree=null;
        Object Double17_tree=null;
        Object Boolean18_tree=null;
        Object NULL21_tree=null;
        RewriteRuleTokenStream stream_Double=new RewriteRuleTokenStream(adaptor,"token Double");
        RewriteRuleTokenStream stream_String=new RewriteRuleTokenStream(adaptor,"token String");
        RewriteRuleTokenStream stream_Boolean=new RewriteRuleTokenStream(adaptor,"token Boolean");
        RewriteRuleTokenStream stream_Integer=new RewriteRuleTokenStream(adaptor,"token Integer");

        try {
            // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:123:2: ( String -> ^( XML_ELEMENT[\"string\"] String ) | Integer -> ^( XML_ELEMENT[\"integer\"] Integer ) | Double -> ^( XML_ELEMENT[\"double\"] Double ) | Boolean -> ^( XML_ELEMENT[\"boolean\"] Boolean ) | object | array | NULL )
            int alt4=7;
            switch ( input.LA(1) ) {
            case String:
                {
                alt4=1;
                }
                break;
            case Integer:
                {
                alt4=2;
                }
                break;
            case Double:
                {
                alt4=3;
                }
                break;
            case Boolean:
                {
                alt4=4;
                }
                break;
            case 21:
                {
                alt4=5;
                }
                break;
            case 25:
                {
                alt4=6;
                }
                break;
            case NULL:
                {
                alt4=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:123:4: String
                    {
                    String15=(Token)match(input,String,FOLLOW_String_in_value532);  
                    stream_String.add(String15);



                    // AST REWRITE
                    // elements: String
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 123:11: -> ^( XML_ELEMENT[\"string\"] String )
                    {
                        // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:123:14: ^( XML_ELEMENT[\"string\"] String )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "string"), root_1);

                        adaptor.addChild(root_1, stream_String.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 2 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:124:4: Integer
                    {
                    Integer16=(Token)match(input,Integer,FOLLOW_Integer_in_value546);  
                    stream_Integer.add(Integer16);



                    // AST REWRITE
                    // elements: Integer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 124:12: -> ^( XML_ELEMENT[\"integer\"] Integer )
                    {
                        // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:124:15: ^( XML_ELEMENT[\"integer\"] Integer )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "integer"), root_1);

                        adaptor.addChild(root_1, stream_Integer.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 3 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:125:4: Double
                    {
                    Double17=(Token)match(input,Double,FOLLOW_Double_in_value560);  
                    stream_Double.add(Double17);



                    // AST REWRITE
                    // elements: Double
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 125:11: -> ^( XML_ELEMENT[\"double\"] Double )
                    {
                        // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:125:14: ^( XML_ELEMENT[\"double\"] Double )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "double"), root_1);

                        adaptor.addChild(root_1, stream_Double.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 4 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:126:4: Boolean
                    {
                    Boolean18=(Token)match(input,Boolean,FOLLOW_Boolean_in_value574);  
                    stream_Boolean.add(Boolean18);



                    // AST REWRITE
                    // elements: Boolean
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 126:12: -> ^( XML_ELEMENT[\"boolean\"] Boolean )
                    {
                        // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:126:15: ^( XML_ELEMENT[\"boolean\"] Boolean )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XML_ELEMENT, "boolean"), root_1);

                        adaptor.addChild(root_1, stream_Boolean.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                    }
                    break;
                case 5 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:127:4: object
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_object_in_value588);
                    object19=object();

                    state._fsp--;

                    adaptor.addChild(root_0, object19.getTree());

                    }
                    break;
                case 6 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:128:4: array
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_array_in_value595);
                    array20=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array20.getTree());

                    }
                    break;
                case 7 :
                    // /home/andriy/Projects.git/xslt4json/src/org/xerial/json/impl/JSON.g:129:4: NULL
                    {
                    root_0 = (Object)adaptor.nil();

                    NULL21=(Token)match(input,NULL,FOLLOW_NULL_in_value602); 
                    NULL21_tree = (Object)adaptor.create(NULL21);
                    adaptor.addChild(root_0, NULL21_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "value"

    // Delegated rules


 

    public static final BitSet FOLLOW_value_in_json409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_object420 = new BitSet(new long[]{0x0000000000820000L});
    public static final BitSet FOLLOW_field_in_object423 = new BitSet(new long[]{0x0000000000C00000L});
    public static final BitSet FOLLOW_22_in_object426 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_field_in_object428 = new BitSet(new long[]{0x0000000000C00000L});
    public static final BitSet FOLLOW_23_in_object434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_field459 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_field461 = new BitSet(new long[]{0x00000000023E0080L});
    public static final BitSet FOLLOW_value_in_field463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_array495 = new BitSet(new long[]{0x00000000023E0080L});
    public static final BitSet FOLLOW_value_in_array497 = new BitSet(new long[]{0x0000000004400000L});
    public static final BitSet FOLLOW_22_in_array500 = new BitSet(new long[]{0x00000000023E0080L});
    public static final BitSet FOLLOW_value_in_array502 = new BitSet(new long[]{0x0000000004400000L});
    public static final BitSet FOLLOW_26_in_array506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_value532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Integer_in_value546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Double_in_value560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Boolean_in_value574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_in_value588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NULL_in_value602 = new BitSet(new long[]{0x0000000000000002L});

}